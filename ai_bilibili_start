import asyncio
import datetime
import json
import logging
import queue
import re
import uuid
from threading import Thread

import blivedm as blivedm
import blivedm.models.open_live as open_models
import blivedm.models.web as web_models
import requests
import yaml
from flask import Flask
from flask_apscheduler import APScheduler

# 加载配置
f = open('config.yml', 'r', encoding='utf-8')
cont = f.read()
config = yaml.load(cont, Loader=yaml.FullLoader)

Ai_Name = config["AiName"]
split_flag = config["llm"]["split_flag"]
split_limit = config["llm"]["split_limit"]
split_str = split_flag.split("|")
filterEn = config["nsfw"]["filterEn"]
filterCh = config["nsfw"]["filterCh"]

# 在B站开放平台申请的开发者密钥
ACCESS_KEY_ID = config["blivedm"]["ACCESS_KEY_ID"]
ACCESS_KEY_SECRET = config["blivedm"]["ACCESS_KEY_SECRET"]
# 在B站开放平台创建的项目ID
APP_ID = config["blivedm"]["APP_ID"]
# 在B站主播身份码
ROOM_OWNER_AUTH_CODE = config["blivedm"]["ROOM_OWNER_AUTH_CODE"]

QuestionList = queue.Queue()
AnswerList = queue.Queue()

is_ai_ready = True

# 设置控制台日志
today = datetime.date.today().strftime("%Y-%m-%d")
logging.basicConfig(level=logging.INFO, encoding="utf-8",
                    format='%(asctime)s %(levelname)s %(filename)s [line:%(lineno)d] %(message)s',
                    handlers=[logging.StreamHandler(),
                              logging.FileHandler(filename=f"./logs/log_{today}.txt", encoding="utf-8")])
log = logging.getLogger("bilibili-live")


# 过滤html标签
def filter_html_tags(text):
    pattern = r'\[.*?\]|<.*?>|\(.*?\)|\n'  # 匹配尖括号内的所有内容
    return re.sub(pattern, '', text)



# 判断字符位置（包含搜索字符）- 如，搜索“画画女孩”，则输出“女孩”位置
def rfind_index_contain_string(string_array, target_string):
    i = 0
    for s in string_array:
        i = i + 1
        num = target_string.rfind(s)
        if num > 0:
            return num + len(s)
    return 0


def chat_qwen(content):
    url = "http://192.168.31.85:11434/api/chat"
    headers = {"Content-Type": "application/json", "accept": "application/json"}
    data = {
        "model": "qwen2:7b",
        "messages": [
            {
                "content": content,
                "role": "user"
            }
        ]
    }
    response = None
    try:
        response = requests.post(
            url, headers=headers, json=data, verify=False, timeout=(5, 60), stream=True
        )
    except Exception as e:
        log.info(f"【{content}】信息回复异常:{e}")
        return "我听不懂你说什么"

    return response


async def listen_blivedm_task():
    asyncio.create_task(run_single_client())


# B站弹幕监听
async def run_single_client():
    """
    演示监听一个直播间
    """
    client = blivedm.OpenLiveClient(
        access_key_id=ACCESS_KEY_ID,
        access_key_secret=ACCESS_KEY_SECRET,
        app_id=APP_ID,
        room_owner_auth_code=ROOM_OWNER_AUTH_CODE,
    )
    handler = MyHandler()
    client.set_handler(handler)

    client.start()
    try:
        # 演示70秒后停止
        # await asyncio.sleep(70)
        # client.stop()

        await client.join()
    finally:
        await client.stop_and_close()


class MyHandler(blivedm.BaseHandler):
    def _on_heartbeat(self, client: blivedm.BLiveClient, message: web_models.HeartbeatMessage):
        log.info(f'[{client.room_id}] 心跳')

    def _on_open_live_danmaku(self, client: blivedm.OpenLiveClient, message: open_models.DanmakuMessage):
        log.info(f'{message.uname}：{message.msg}')
        traceid = str(uuid.uuid4())
        msg_deal(traceid, message.msg, message.msg_id, message.uname)

    def _on_open_live_gift(self, client: blivedm.OpenLiveClient, message: open_models.GiftMessage):
        coin_type = '金瓜子' if message.paid else '银瓜子'
        total_coin = message.price * message.gift_num
        log.info(f'[{message.room_id}] {message.uname} 赠送{message.gift_name}x{message.gift_num}'
                 f' （{coin_type}x{total_coin}）')

    def _on_open_live_buy_guard(self, client: blivedm.OpenLiveClient, message: open_models.GuardBuyMessage):
        log.info(f'[{message.room_id}] {message.user_info.uname} 购买 大航海等级={message.guard_level}')

    def _on_open_live_super_chat(
            self, client: blivedm.OpenLiveClient, message: open_models.SuperChatMessage
    ):
        log.info(f'[{message.room_id}] 醒目留言 ¥{message.rmb} {message.uname}：{message.message}')

    def _on_open_live_super_chat_delete(
            self, client: blivedm.OpenLiveClient, message: open_models.SuperChatDeleteMessage
    ):
        log.info(f'[{message.room_id}] 删除醒目留言 message_ids={message.message_ids}')

    def _on_open_live_like(self, client: blivedm.OpenLiveClient, message: open_models.LikeMessage):
        log.info(f'[{message.room_id}] {message.uname} 点赞')


def msg_deal(traceid, query, uid, user_name):
    """
    处理弹幕消息
    """
    # traceid = str(uuid.uuid4())
    query = filter(query, filterCh)
    log.info(f"[{traceid}]弹幕捕获：[{user_name}]:{query}")  # 打印弹幕信息
    # 询问LLM
    llm_json = {"traceid": traceid, "prompt": query, "uid": uid, "username": user_name}
    QuestionList.put(llm_json)  # 将弹幕消息放入队列


# 检查LLM回复线程
def check_answer():
    """
    如果AI没有在生成回复且队列中还有问题 则创建一个生成的线程
    :return:
    """
    global is_ai_ready
    global QuestionList
    if not QuestionList.empty() and is_ai_ready:
        is_ai_ready = False
        answers_thread = Thread(target=aiResponseTry)
        answers_thread.start()


# LLM回复
def aiResponseTry():
    global is_ai_ready
    try:
        ai_response()
    except Exception as e:
        log.info(f"【ai_response】发生了异常：{e}")
        is_ai_ready = True


def ai_response():
    global is_ai_ready
    is_ai_ready = False
    llm_json = QuestionList.get()
    # 参数提取
    uid = llm_json["uid"]
    username = llm_json["username"]
    prompt = llm_json["prompt"]
    traceid = llm_json["traceid"]
    response = chat_qwen(prompt)
    all_content = ""
    for line in response.iter_lines():
        if line:
            # 处理收到的JSON响应
            # response_json = json.loads(line)
            str_data = line.decode('utf-8')
            # log.info(str_data)
            response_json = json.loads(str_data)
            if (response_json["done"] != True):
                stream_content = response_json["message"]["content"]
                all_content += stream_content


def main():
    log.info(f"AI{Ai_Name}开始初始化...")
    log.info(f"{Ai_Name}的直播间开启弹幕监听")
    asyncio.run(listen_blivedm_task())

    sched1.add_job(func=check_answer, trigger="interval", seconds=1, id=f"answer", max_instances=100)
    log.info(f"AI{Ai_Name}结束直播")


app = Flask(__name__, template_folder='./html')
sched1 = APScheduler()
sched1.init_app(app)
if (__name__ == '__main__'):
    main()
